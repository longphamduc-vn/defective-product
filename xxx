import cv2
import numpy as np
from tkinter import *
from PIL import Image, ImageTk

# Thiết lập ngưỡng phát hiện chuyển động
MOTION_THRESHOLD = 5000  # Giá trị này có thể điều chỉnh tùy vào mức độ nhạy cảm bạn mong muốn

# Hàm cập nhật khung hình từ camera
def update_frame():
    global prev_frame
    
    # Đọc khung hình từ camera
    _, frame = cap.read()
    # Chuyển khung hình thành dạng xám để xử lý
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Nếu đã có khung hình trước đó, tính toán sự khác biệt
    if prev_frame is not None:
        # Tính toán sự khác biệt giữa khung hiện tại và khung trước đó
        frame_diff = cv2.absdiff(prev_frame, gray)
        # Ngưỡng hóa hình ảnh để nổi bật sự thay đổi
        _, diff_threshold = cv2.threshold(frame_diff, 25, 255, cv2.THRESH_BINARY)
        
        # Tính toán tổng số pixel thay đổi
        motion_score = np.sum(diff_threshold) / 255
        
        # Hiển thị tốc độ chuyển động ra console
        print(f"Tốc độ chuyển động: {motion_score}")
        
        # Kiểm tra nếu chuyển động chậm (motion_score thấp)
        if motion_score < MOTION_THRESHOLD:
            # Nhận diện tất cả các màu trừ màu trắng
            # Chuyển đổi sang không gian màu HSV
            hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            
            # Thiết lập ngưỡng màu cho tất cả các màu khác trừ màu trắng
            lower_color = np.array([0, 0, 0])         # Màu tối nhất
            upper_color = np.array([180, 255, 200])   # Giới hạn để tránh màu trắng
            
            # Tạo mặt nạ chỉ giữ lại các vùng không phải màu trắng
            color_mask = cv2.inRange(hsv_frame, lower_color, upper_color)
            
            # Tìm các đường viền của các vùng có màu khác màu trắng
            contours, _ = cv2.findContours(color_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # Vẽ các đường viền và hiển thị kích thước của mỗi vùng màu
            for contour in contours:
                area = cv2.contourArea(contour)
                if area > 50:  # Lọc các vùng có diện tích nhỏ
                    x, y, w, h = cv2.boundingRect(contour)
                    cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)
                    cv2.putText(frame, f"Size: {int(area)}", (x, y - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)
    
    # Cập nhật khung hình hiện tại làm khung hình trước cho lần tiếp theo
    prev_frame = gray

    # Chuyển khung hình thành định dạng mà Tkinter có thể hiển thị
    img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
    imgtk = ImageTk.PhotoImage(image=img)
    
    # Cập nhật hình ảnh trong giao diện Tkinter
    camera_label.imgtk = imgtk
    camera_label.configure(image=imgtk)
    camera_label.after(10, update_frame)

# Tạo cửa sổ Tkinter
root = Tk()
root.title("Nhận diện tất cả các màu trừ màu trắng")

# Khởi tạo camera
cap = cv2.VideoCapture(0)  # 0 là chỉ số của camera mặc định
prev_frame = None  # Biến lưu trữ khung hình trước

# Tạo widget để hiển thị khung hình từ camera
camera_label = Label(root)
camera_label.pack()

# Bắt đầu cập nhật khung hình
update_frame()

# Chạy ứng dụng
root.mainloop()

# Giải phóng tài nguyên camera khi ứng dụng kết thúc
cap.release()
cv2.destroyAllWindows()